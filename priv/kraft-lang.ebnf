
module ::= definition+

definition ::= name inputcomposant* meta? "->" body "end"

inputcomposant ::= ( name ":" )? typename "(" number? ")"
outpcomposant ::= typename "(" expression? ")"

meta ::=  "(" name ":" expression ("," name ":" expression)* ")"

body ::= results | choice

results ::= ( outpcomposant proplist? )+

choice ::=
    "draw" expression (">>" (number|"_") "->" body)+ "end"

proplist ::= "{" ( name "=" expression (","name "=" expression)*)? "}"

expression ::= arithmetic | variable | number | "(" expression ")" | funcall | string

funcall ::=
    "(" (name|oper) expression expression* ")"
    |  variable "." name

variable ::= name

oper ::= "+"|"-"|"*"|"/"

arithmetic ::= expression ("+"|"-"|"/"|"*") expression

name ::= [a-z_][A-Za-z_]*

number ::= [0-9]+ ( "." [0-9]+ )? ( [eE][0-9]+ )?
