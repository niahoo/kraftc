module 'km@test_check' ['module_info'/0,
			'module_info'/1,
			'technics_infos'/0,
			'technic_infos'/1,
			'pain'/2,
			'crush'/1,
			'recolte'/0,
			'revolution'/1,
			'pain'/1,
			'crush'/2,
			'recrutement'/1]
    attributes []
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('km@test_check')
'module_info'/1 =
    fun (Key) ->
	call 'erlang':'get_module_info'
	    ('km@test_check', Key)
'technics_infos'/0 =
    fun () ->
	[{'recrutement',[{[{'Villageois','service'}],[['MaindOeuvre']]}]}|[{'recolte',[{[],[['Ble']]}]}|[{'crush',[{[{'Ble',1000}],[['Farine']]}|[{[{'Ble',1}],[['Farine']]}|[{[{'Ble',10}],[['Farine']]}|[{[{'Agriculteur',1}|[{'Ble',1}]],[['Farine']]}|[{[{'Ble',1}],[['Farine']|[['Farine']|[['Void']|[['Farine']]]]]}|[{[{'Agriculteur','service'}|[{'Ble',10}]],[['Farine']|[['Farine']]]}|[{[{'Agriculteur','service'}|[{'Ble',10}]],[['Farine']|[['Farine']|[['Void']]]]}|[{[{'Agriculteur','service'}|[{'Ble',10}]],[['Farine']|[['Farine']|[['Void']]]]}|[{[{'Agriculteur','service'}|[{'Ble',10}]],[['Farine']|[['Farine']|[['Farine']|[['Void']]]]]}]]]]]]]]]}|[{'revolution',[{[{'Agriculteurs','service'}],[['True']|[['False']]]}]}|[{'pain',[{[{'Farine',100}|[{'Eau',20}]],[['Pain']]}|[{[{'VieuxPain',10}],[['Pain'|['Miettes']]]}|[{[{'VieuxPain',10}|[{'Cuisinier','service'}]],[['Pain'|['Miettes']]]}]]]}]]]]]
'technic_infos'/1 =
    fun (Key) ->
	case Key of
	  <'recrutement'> when 'true' ->
	      [{[{'Villageois','service'}],[['MaindOeuvre']]}]
	  <'recolte'> when 'true' ->
	      [{[],[['Ble']]}]
	  <'crush'> when 'true' ->
	      [{[{'Ble',1000}],[['Farine']]}|[{[{'Ble',1}],[['Farine']]}|[{[{'Ble',10}],[['Farine']]}|[{[{'Agriculteur',1}|[{'Ble',1}]],[['Farine']]}|[{[{'Ble',1}],[['Farine']|[['Farine']|[['Void']|[['Farine']]]]]}|[{[{'Agriculteur','service'}|[{'Ble',10}]],[['Farine']|[['Farine']]]}|[{[{'Agriculteur','service'}|[{'Ble',10}]],[['Farine']|[['Farine']|[['Void']]]]}|[{[{'Agriculteur','service'}|[{'Ble',10}]],[['Farine']|[['Farine']|[['Void']]]]}|[{[{'Agriculteur','service'}|[{'Ble',10}]],[['Farine']|[['Farine']|[['Farine']|[['Void']]]]]}]]]]]]]]]
	  <'revolution'> when 'true' ->
	      [{[{'Agriculteurs','service'}],[['True']|[['False']]]}]
	  <'pain'> when 'true' ->
	      [{[{'Farine',100}|[{'Eau',20}]],[['Pain']]}|[{[{'VieuxPain',10}],[['Pain'|['Miettes']]]}|[{[{'VieuxPain',10}|[{'Cuisinier','service'}]],[['Pain'|['Miettes']]]}]]]
	  <_X_Any> when 'true' ->
	      'undefined'
	end
'pain'/2 =
    fun (_X_ktArg2,_X_ktArg1) ->
	case [_X_ktArg2,_X_ktArg1] of
	  <[{'Farine',_X_Anon_2},{'Eau',_X_Anon_3}]> when 'true' ->
	      [{'Pain',10,[]}]
	  <[{'VieuxPain',Var_vp},{'Cuisinier',Var_c}]> when 'true' ->
	      [{'Pain',call 'erlang':'/'
			   (call 'kl_lib':'getprop'
				('skillCuisine', Var_c), 5),[{'quality',call 'erlang':'-'
									    (call 'kl_lib':'getprop'
										 ('quality', Var_vp), 2)}]}|[{'Miettes',50,[]}]]
	  <_X_otherwise1> when 'true' ->
	      call 'erlang':'error'
		  ('function_clause')
	end
'crush'/1 =
    fun (_X_ktArg1) ->
	case [_X_ktArg1] of
	  <[{'Ble',_X_Anon_5}]> when 'true' ->
	      [{'Farine',100,[]}]
	  <[{'Ble',_X_Anon_6}]> when 'true' ->
	      [{'Farine',1,[]}]
	  <[{'Ble',_X_Anon_7}]> when 'true' ->
	      [{'Farine',1,[{'nutrition',10}|[{'conservation',5}|[{'quality',5}|[{'_prop',3}]]]]}]
	  <[{'Ble',Var_b}]> when 'true' ->
	      case call 'kl_lib':'getprop'
		       ('quality', Var_b) of
		<Var_Term_9>
		    when call 'erlang':'>'
			  (Var_Term_9,
			   10) ->
		    [{'Farine',9,[]}]
		<Var_Term_10>
		    when call 'erlang':'>'
			  (Var_Term_10,
			   5) ->
		    [{'Farine',10,[]}]
		<Var__otherwise11> when 'true' ->
		    [{'Void',0,[]}]
		<Var_Term_12>
		    when call 'erlang':'>'
			  (Var_Term_12,
			   3) ->
		    [{'Farine',1,[]}]
		<_X_otherwise8> when 'true' ->
		    call 'erlang':'error'
			('draw_clause')
	      end
	  <_X_otherwise4> when 'true' ->
	      call 'erlang':'error'
		  ('function_clause')
	end
'recolte'/0 =
    fun () ->
	case [] of
	  <[]> when 'true' ->
	      [{'Ble',100,[]}]
	  <_X_otherwise13> when 'true' ->
	      call 'erlang':'error'
		  ('function_clause')
	end
'revolution'/1 =
    fun (_X_ktArg1) ->
	case [_X_ktArg1] of
	  <[{'Agriculteurs',Var_as}]> when 'true' ->
	      case call 'kl_lib':'getprop'
		       ('faim', Var_as) of
		<Var_Term_16>
		    when call 'erlang':'>'
			  (Var_Term_16,
			   10) ->
		    [{'True','service',[]}]
		<Var__otherwise17> when 'true' ->
		    [{'False','service',[]}]
		<_X_otherwise15> when 'true' ->
		    call 'erlang':'error'
			('draw_clause')
	      end
	  <_X_otherwise14> when 'true' ->
	      call 'erlang':'error'
		  ('function_clause')
	end
'pain'/1 =
    fun (_X_ktArg1) ->
	case [_X_ktArg1] of
	  <[{'VieuxPain',Var_vp}]> when 'true' ->
	      [{'Pain',5,[{'quality',call 'erlang':'-'
					 (call 'kl_lib':'getprop'
					      ('quality', Var_vp), 2)}]}|[{'Miettes',50,[]}]]
	  <_X_otherwise18> when 'true' ->
	      call 'erlang':'error'
		  ('function_clause')
	end
'crush'/2 =
    fun (_X_ktArg2,_X_ktArg1) ->
	case [_X_ktArg2,_X_ktArg1] of
	  <[{'Agriculteur',Var_a},{'Ble',Var_b}]> when 'true' ->
	      [{'Farine',1,[{'nutrition',call 'erlang':'*'
					     (call 'erlang':'+'
						  (10, call 'kl_lib':'getprop'
							   ('skill_agriculture', Var_a)), 2)},{'conservation',call 'erlang':'+'
														 (call 'kl_lib':'getprop'
														      ('conservation', Var_b), 5)},{'quality',call 'erlang':'+'
																				 (5, call 'erlang':'/'
																					 (call 'kl_lib':'getprop'
																					      ('skill_agriculture', Var_a), 3))}]}]
	  <[{'Agriculteur',Var_a},{'Ble',_X_Anon_20}]> when 'true' ->
	      case call 'kl_lib':'random'
		       (call 'kl_lib':'getprop'
			    ('skill_agriculture', Var_a), 100) of
		<Var_Term_22>
		    when call 'erlang':'>'
			  (Var_Term_22,
			   97) ->
		    [{'Farine',10,[]}]
		<Var_Term_23>
		    when call 'erlang':'>'
			  (Var_Term_23,
			   5) ->
		    [{'Farine',9,[]}]
		<_X_otherwise21> when 'true' ->
		    call 'erlang':'error'
			('draw_clause')
	      end
	  <[{'Agriculteur',Var_a},{'Ble',_X_Anon_24}]> when 'true' ->
	      case call 'kl_lib':'random'
		       (call 'kl_lib':'getprop'
			    ('skill_agriculture', Var_a), 100) of
		<Var_Term_26>
		    when call 'erlang':'>'
			  (Var_Term_26,
			   97) ->
		    [{'Farine',10,[]}]
		<Var_Term_27>
		    when call 'erlang':'>'
			  (Var_Term_27,
			   5) ->
		    [{'Farine',9,[]}]
		<Var__otherwise28> when 'true' ->
		    [{'Void',0,[]}]
		<_X_otherwise25> when 'true' ->
		    call 'erlang':'error'
			('draw_clause')
	      end
	  <[{'Agriculteur',Var_a},{'Ble',_X_Anon_29}]> when 'true' ->
	      case call 'kl_lib':'random'
		       (call 'kl_lib':'max'
			    (5, call 'kl_lib':'getprop'
				    ('skill_agriculture', Var_a)), 100) of
		<Var_Term_31>
		    when call 'erlang':'>'
			  (Var_Term_31,
			   97) ->
		    [{'Farine',10,[]}]
		<Var_Term_32>
		    when call 'erlang':'>'
			  (Var_Term_32,
			   5) ->
		    [{'Farine',9,[]}]
		<Var__otherwise33> when 'true' ->
		    [{'Void',0,[]}]
		<_X_otherwise30> when 'true' ->
		    call 'erlang':'error'
			('draw_clause')
	      end
	  <[{'Agriculteur',Var_a},{'Ble',_X_Anon_34}]> when 'true' ->
	      case call 'kl_lib':'random'
		       (call 'kl_lib':'getprop'
			    ('skill_agriculture', Var_a), 100) of
		<Var_Term_36>
		    when call 'erlang':'>'
			  (Var_Term_36,
			   90) ->
		    [{'Farine',10,[]}]
		<Var_Term_37>
		    when call 'erlang':'>'
			  (Var_Term_37,
			   5) ->
		    case call 'kl_lib':'random'
			     (1, 2) of
		      <Var_Term_39>
			  when call 'erlang':'>'
				(Var_Term_39,
				 1) ->
			  [{'Farine',9,[]}]
		      <Var__otherwise40> when 'true' ->
			  [{'Farine',8,[]}]
		      <Var__otherwise41> when 'true' ->
			  [{'Void',0,[]}]
		      <_X_otherwise38> when 'true' ->
			  call 'erlang':'error'
			      ('draw_clause')
		    end
		<_X_otherwise35> when 'true' ->
		    call 'erlang':'error'
			('draw_clause')
	      end
	  <_X_otherwise19> when 'true' ->
	      call 'erlang':'error'
		  ('function_clause')
	end
'recrutement'/1 =
    fun (_X_ktArg1) ->
	case [_X_ktArg1] of
	  <[{'Villageois',_X_Anon_43}]> when 'true' ->
	      [{'MaindOeuvre',1,[]}]
	  <_X_otherwise42> when 'true' ->
	      call 'erlang':'error'
		  ('function_clause')
	end
end